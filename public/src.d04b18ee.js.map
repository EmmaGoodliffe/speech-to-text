{"version":3,"sources":["copy.ts","download.ts","Server.ts","Progress.ts","index.ts"],"names":[],"mappings":"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","file":"src.d04b18ee.js","sourceRoot":"..\\src","sourcesContent":["const copy = text => {\r\n  const textArea = document.createElement(\"textarea\");\r\n  textArea.value = text;\r\n  document.body.appendChild(textArea);\r\n  textArea.focus();\r\n  textArea.select();\r\n  try {\r\n    const successful = document.execCommand(\"copy\");\r\n    if (!successful) throw \"Unsuccessful copy\";\r\n  } catch (err) {\r\n    console.error(`Error copying text: ${err}`);\r\n  }\r\n  document.body.removeChild(textArea);\r\n};\r\n\r\nexport default copy;\r\n","const download = (filename: string, text: string) => {\r\n  const element = document.createElement(\"a\");\r\n  element.setAttribute(\r\n    \"href\",\r\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\r\n  );\r\n  element.setAttribute(\"download\", filename);\r\n  element.style.display = \"none\";\r\n  document.body.appendChild(element);\r\n  element.click();\r\n  document.body.removeChild(element);\r\n};\r\n\r\nexport default download;\r\n","import { server } from \"typescript\";\r\n\r\nconst delay = async (time: number): Promise<void> =>\r\n  new Promise(resolve => setTimeout(resolve, time));\r\n\r\nclass Server {\r\n  el: HTMLElement;\r\n  isSpinning: boolean;\r\n  angle: number;\r\n  constructor(el: Server[\"el\"]) {\r\n    this.el = el;\r\n    this.isSpinning = false;\r\n    this.angle = 0;\r\n  }\r\n  start() {\r\n    this.isSpinning = true;\r\n    this.run();\r\n  }\r\n  stop() {\r\n    this.isSpinning = false;\r\n  }\r\n  async run() {\r\n    if (this.isSpinning) {\r\n      this.el.style.transform = `rotate(${this.angle}deg)`;\r\n      this.angle++;\r\n      await delay(10);\r\n      await this.run();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Server;\r\n","class Progress {\r\n  el: HTMLDivElement;\r\n  constructor(el: Progress[\"el\"]) {\r\n    this.el = el;\r\n    this.set(0);\r\n  }\r\n  set(percentage: number) {\r\n    this.el.style.width = `${percentage}%`;\r\n  }\r\n}\r\n\r\nexport default Progress;\r\n","import copy from \"./copy\";\r\nimport download from \"./download\";\r\nimport Server from \"./Server\";\r\nimport Progress from \"./Progress\";\r\n\r\nconst storage = firebase.storage();\r\n\r\nconst wavFileInput = document.querySelector(\"#wav-file\") as HTMLInputElement;\r\nconst submitButton = document.querySelector(\"#submit\") as HTMLButtonElement;\r\nconst resultPara = document.querySelector(\"#result\") as HTMLParagraphElement;\r\nconst progressDiv = document.querySelector(\r\n  \"#progress .determinate\"\r\n) as HTMLDivElement;\r\nconst serverIcon = document.querySelector(\"#server\") as HTMLElement;\r\n\r\nconst server = new Server(serverIcon);\r\nconst progress = new Progress(progressDiv);\r\n\r\ninterface STTRequest {\r\n  uri: string;\r\n}\r\n\r\ninterface STTResponse {\r\n  input: STTRequest;\r\n  transcription?: string;\r\n  error?: string;\r\n}\r\n\r\nconst post = async (url: string, data: object): Promise<STTResponse> => {\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nsubmitButton.addEventListener(\"click\", () => {\r\n  // File\r\n  const [file] = wavFileInput.files;\r\n  const filename = `wav/${Date.now()}.wav`;\r\n  const uri = `gs://lgim-stt.appspot.com/${filename}`;\r\n  // Storage ref\r\n  const ref = storage.ref(filename);\r\n  // Upload\r\n  const task = ref.put(file);\r\n  // Progress bar\r\n  task.on(\r\n    \"state_changed\",\r\n    snapshot => {\r\n      // Progress\r\n      const percentage =\r\n        (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n      progress.set(percentage);\r\n    },\r\n    err => {\r\n      // Error\r\n      console.error(`Error uploading file: ${err}`);\r\n    },\r\n    async () => {\r\n      // Complete\r\n      server.start();\r\n      const response = await post(\"/stt/uri\", { uri });\r\n      const { error } = response;\r\n      if (error) {\r\n        console.error({ error });\r\n        throw `Error in post request: ${error}`;\r\n      }\r\n      const { transcription } = response;\r\n      server.stop();\r\n      progress.set(0);\r\n      resultPara.innerText = transcription;\r\n      copy(transcription);\r\n      download(\"transcript.txt\", transcription);\r\n    }\r\n  );\r\n});\r\n"]}