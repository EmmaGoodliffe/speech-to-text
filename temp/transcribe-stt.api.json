{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.9.4",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "transcribe-stt!",
  "docComment": "/**\n * Transcribe audio of any length using Google's Speech to Text API\n *\n * See <a href=\"#classes\">classes</a>\n *\n * @packageDocumentation\n */\n",
  "name": "transcribe-stt",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "transcribe-stt!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!AudioEncoding:type",
          "docComment": "/**\n * Audio encoding\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AudioEncoding = "
            },
            {
              "kind": "Content",
              "text": "keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "google.cloud.speech.v1.RecognitionConfig.AudioEncoding",
              "canonicalReference": "@google-cloud/speech!google.cloud.speech.v1.RecognitionConfig.AudioEncoding:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AudioEncoding",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "transcribe-stt!DistributedSTTStream:class",
          "docComment": "/**\n * A distributed STT stream (for audio files longer than 305 seconds)\n *\n * @example\n *\n * This example writes the transcript of a long LINEAR16 16000Hz WAV file to a text file. You can customise the functionality of the stream with the {@link STTStreamOptionsAppend}.\n *\n * If you don't know the encoding or sample rate of you WAV file, try using {@link STTStream.testHeaders}\n * ```ts\n * import { DistributedSTTStream } from \"transcribe-stt\";\n *\n * const audioFilename = \"./<input audio file>.wav\";\n * const audioDirname = \"./<output audio directory>\";\n * const textFilename = \"./<output text file>.txt\";\n * const options = {\n *  encoding: \"LINEAR16\",\n *  sampleRateHertz: 16000\n * };\n *\n * // Initialise stream\n * const stream = new DistributedSTTStream(audioFilename, audioDirname, textFilename, options);\n *\n * // Empty text file\n * stream.emptyTextFile();\n *\n * // Start stream and write output to text file\n * stream.start();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class DistributedSTTStream "
            }
          ],
          "releaseTag": "Public",
          "name": "DistributedSTTStream",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "transcribe-stt!DistributedSTTStream:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DistributedSTTStream` class\n *\n * @param audioFilename - Path to original audio file\n *\n * @param audioDirname - Path to output distributed audio directory\n *\n * @param textFilename - Path to text file\n *\n * @param options - Options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", audioDirname: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptionsAppend",
                  "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "audioFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "audioDirname",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "textFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#audioDirname:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioDirname: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioDirname",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#audioFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#distribute:member(1)",
              "docComment": "/**\n * Distribute audio into separate files (automatically called by {@link DistributedSTTStream.start})\n *\n * @remarks\n *\n * Single audio file is split up into smaller files of 300 seconds so they can be used with Google's streaming API. Each file is separately streamed and written to the text file when {@link DistributedSTTStream.start} is called\n *\n * @returns STD output of bash script\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distribute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "distribute"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#distributeListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distributeListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "DistributeListener",
                  "canonicalReference": "transcribe-stt!DistributeListener:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distributeListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#emptyTextFile:member(1)",
              "docComment": "/**\n * Empty text file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emptyTextFile(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emptyTextFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#on:member(1)",
              "docComment": "/**\n * Listen to `\"distribute\"` event and run callback functions\n *\n * @remarks\n *\n * The callback function is run whenever the {@link DistributedSTTStream.distribute} method finishes.\n *\n * This can be helpful if you are using a very large audio file and want to know when it has been split up by the {@link DistributedSTTStream.start} method.\n *\n * ({@link DistributedSTTStream.distribute} returns a promise which resolves when the distribution completes. So if you are using the method on its own, this event is obsolete)\n *\n * @param event - Event to listen to\n *\n * @param callback - Function to run when event fires\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"distribute\""
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "DistributeListener",
                  "canonicalReference": "transcribe-stt!DistributeListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#on:member(2)",
              "docComment": "/**\n * Listen to `\"progress\"` event and run callback functions\n *\n * @remarks\n *\n * The callback function is run whenever a distributed audio file is transcribed. The progress percentage of audio files transcribed is passed as the parameter of the callback. For example, if 2 of 4 audio files have been transcribed, `50` will be passed, representing 50%\n *\n * @param event - Event to listen to\n *\n * @param callback - Function to run when event fires\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"progress\""
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ProgressListener",
                  "canonicalReference": "transcribe-stt!ProgressListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptionsAppend",
                  "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#progress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progress: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#progressListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "ProgressListener",
                  "canonicalReference": "transcribe-stt!ProgressListener:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progressListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#start:member(1)",
              "docComment": "/**\n * Start distributed STT stream\n *\n * @param useConsole - Whether to show a loading spinner and deliver warnings in the console during STT stream. Default `true`\n *\n * @returns Lines of the transcript\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(useConsole?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "useConsole",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#textFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!DistributeListener:type",
          "docComment": "/**\n * Listener for the distribute value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DistributeListener = "
            },
            {
              "kind": "Content",
              "text": "() => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DistributeListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!Listener:type",
          "docComment": "/**\n * Listener for any property\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Listener = "
            },
            {
              "kind": "Reference",
              "text": "ProgressListener",
              "canonicalReference": "transcribe-stt!ProgressListener:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DistributeListener",
              "canonicalReference": "transcribe-stt!DistributeListener:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Listener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!ProgressListener:type",
          "docComment": "/**\n * Listener for the progress value\n *\n * @remarks\n *\n * <h2>Parameters</h2> <code>progress</code> - Progress percentage\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ProgressListener = "
            },
            {
              "kind": "Content",
              "text": "(progress: number) => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProgressListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "transcribe-stt!STTStream:class",
          "docComment": "/**\n * An STT stream (for audio files shorter than 305 seconds)\n *\n * @example\n *\n * This example writes the transcript of a short LINEAR16 16000Hz WAV file to a text file. You can customise the functionality of the stream with the {@link STTStreamOptions}.\n *\n * If you don't know the encoding or sample rate of your WAV file, try using {@link STTStream.testHeaders}\n * ```ts\n * import { STTStream } form \"transcribe-stt\";\n *\n * const audioFilename = \"./<input audio file>.wav\";\n * const textFilename = \"./<output text file>.txt\";\n * const options = {\n *  encoding: \"LINEAR16\",\n *  sampleRateHertz: 16000\n * };\n *\n * // Initialise stream\n * const stream = new STTStream(audioFilename, textFilename, options);\n *\n * // Start stream and write output to text file\n * stream.start();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class STTStream "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStream",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "transcribe-stt!STTStream:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `STTStream` class\n *\n * @param audioFilename - Path to audio file\n *\n * @param textFilename - Path to text file\n *\n * @param options - Options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "audioFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "textFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#append:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"append\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#audioFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!STTStream#emptyTextFile:member(1)",
              "docComment": "/**\n * Empty text file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emptyTextFile(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emptyTextFile"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#encoding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"encoding\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#languageCode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languageCode: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"languageCode\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#sampleRateHertz:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sampleRateHertz: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"sampleRateHertz\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sampleRateHertz",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!STTStream#start:member(1)",
              "docComment": "/**\n * Start STT stream\n *\n * @param useConsole - Whether to show a loading spinner and deliver warnings in the console during STT stream. Default `true`\n *\n * @returns Lines of the transcript\n *\n * @example\n *\n * See {@link STTStream} for an example\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(useConsole?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "useConsole",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!STTStream#testHeaders:member(1)",
              "docComment": "/**\n * Test if headers of WAV file are correct\n *\n * @remarks\n *\n * This method does not test encodings perfectly as many encodings go by multiples aliases. For example, \"LINEAR16\" is often listed in headers as \"Microsoft PCM 16 bit\".\n *\n * Because of this, {@link STTStream.testHeaders} does not have to pass for {@link STTStream.start} to pass.\n *\n * If you find an alias of an encoding that causes {@link STTStream.testHeaders} to throw a false error, please leave an issue about it in the GitHub repo\n *\n * @returns If encoding was correct, if sample rate was correct, and the headers of the WAV file\n *\n * @example\n *\n * This example checks if the headers you passed to {@link STTStream} are correct and logs them. This can be helpful when you don't know what headers of your WAV file are.\n *\n * See {@link STTStream} to initialise the stream\n * ```ts\n * // ...\n *\n * // Test headers\n * const [goodEncoding, goodSampleRate, headers] = await stream.testHeaders();\n *\n * // Log results\n * console.log(\"File has correct encoding?\", goodEncoding);\n * console.log(\"File has correct sample rate?\", goodSampleRate);\n *\n * // Log headers\n * console.log(\"File has encoding:\", headers.encoding);\n * console.log(\"File has sample rate:\", headers.sampleRateHertz);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testHeaders(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[boolean, boolean, "
                },
                {
                  "kind": "Reference",
                  "text": "WavHeaders",
                  "canonicalReference": "transcribe-stt!WavHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "testHeaders"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#textFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "transcribe-stt!STTStreamOptions:interface",
          "docComment": "/**\n * Options for an STT stream\n *\n * @remarks\n *\n * See {@link WavHeaders} for other properties\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface STTStreamOptions extends "
            },
            {
              "kind": "Reference",
              "text": "WavHeaders",
              "canonicalReference": "transcribe-stt!WavHeaders:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStreamOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#append:member",
              "docComment": "/**\n * When true, results are appended to the text file. When false, the text file is emptied first. Default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#languageCode:member",
              "docComment": "/**\n * BCP-47 language code. See https://cloud.google.com/speech-to-text/docs/languages. Default `\"en-US\"`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languageCode?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface",
          "docComment": "/**\n * Options for an STT stream but `append` must be set to `true`\n *\n * @remarks\n *\n * `append` must be set to `true` because each audio file's transcript is appended to the same file. Despite this, you can use {@link DistributedSTTStream.emptyTextFile} to empty the file first. See {@link DistributedSTTStream} for an example.\n *\n * See {@link STTStreamOptions} for other properties\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface STTStreamOptionsAppend extends "
            },
            {
              "kind": "Reference",
              "text": "STTStreamOptions",
              "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStreamOptionsAppend",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptionsAppend#append:member",
              "docComment": "/**\n * Extends {@link STTStreamOptions.append}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append: "
                },
                {
                  "kind": "Content",
                  "text": "true"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "transcribe-stt!WavHeaders:interface",
          "docComment": "/**\n * Headers of a WAV file\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface WavHeaders "
            }
          ],
          "releaseTag": "Public",
          "name": "WavHeaders",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!WavHeaders#encoding:member",
              "docComment": "/**\n * Audio encoding. See https://cloud.google.com/speech-to-text/docs/encoding\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioEncoding",
                  "canonicalReference": "transcribe-stt!AudioEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!WavHeaders#sampleRateHertz:member",
              "docComment": "/**\n * Audio sample rate in Hertz\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sampleRateHertz: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sampleRateHertz",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
