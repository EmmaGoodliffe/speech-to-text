{"version":3,"sources":["helpers.ts","STTStream.ts","DistributedSTTStream.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src/ts","sourcesContent":["import { exec } from \"child_process\";\nimport { Ora } from \"ora\";\nimport { dirname, resolve } from \"path\";\nimport { STTStreamOptions } from \"./STTStream\";\n\n// Constants\nconst WSL_URL = \"_\"; // TODO: Enter correct URL\n\n/**\n * Converts a relative path to an absolute path using the directory the function is run from\n * @param path Relative path\n * @returns Absolute path\n */\nexport const relPathToAbs = (path: string): string =>\n  resolve(dirname(\"\"), path);\n\n/**\n * Show spinner while a promise is running\n * @param promise Promise to base spinner on\n * @param spinner Spinner instance\n * @param successText Text to show if promise succeeds\n * @param failText Text to show if promise fails\n * @returns Whatever the promise returns\n */\nexport const useSpinner = async <T>(\n  promise: Promise<T>,\n  spinner: Ora,\n  successText = \"Done\",\n  failText = \"Failed\"\n): Promise<T> => {\n  // Start spinner\n  spinner.start();\n  try {\n    // Await promise\n    const result = await promise;\n    // Stop spinner with success\n    spinner.succeed(successText);\n    // Return result of promise\n    return result;\n  } catch (err) {\n    // Stop spinner with failure\n    spinner.fail(failText);\n    // Throw error\n    throw err;\n  }\n};\n\n/**\n * Run bash script\n * @param command Command to run bash script\n * @returns STD output\n */\nexport const runBashScript = (command: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    exec(command, (error, stdout, stderr) => {\n      if (error) {\n        const isWindowsError = `${stderr}`.includes(\n          \"'.' is not recognized as an internal or external command\"\n        );\n        if (isWindowsError) {\n          const errorPrefix = `An error occurred running a bash script. If you are using windows, please use WSL. See ${WSL_URL} for more details`;\n          reject(`${errorPrefix}. ${error}`);\n        } else {\n          reject(error);\n        }\n      }\n\n      if (stderr && stderr.length) {\n        reject(stderr);\n      }\n\n      resolve(stdout);\n    });\n  });\n\n/**\n * Get headers of wav file\n * @param wavFilename Path to wav file\n * @returns Headers\n */\nexport const getWavHeaders = async (\n  wavFilename: string\n): Promise<STTStreamOptions> => {\n  const command = `./headers.sh ${wavFilename}`;\n  const stdout = await runBashScript(command);\n  const [encodingString, sampleRateString] = stdout\n    .replace(\"\\n\", \"\")\n    .toUpperCase()\n    .split(\",\");\n  const encoding = encodingString as STTStreamOptions[\"encoding\"];\n  const sampleRateHertz = parseInt(sampleRateString);\n  return { encoding, sampleRateHertz };\n};\n\n/**\n * Generate \"received but expected\" error message\n * @param description Description of received and expected entities\n * @param rec Received value\n * @param exp Expected value\n * @returns Error message\n */\nexport const recExp = <T>(description: string, rec: T, exp: T): string =>\n  `Received ${description} ${rec} but expected ${exp}`;\n","import { SpeechClient } from \"@google-cloud/speech\";\nimport { google } from \"@google-cloud/speech/build/protos/protos\";\nimport { appendFile, createReadStream, writeFileSync } from \"fs\";\nimport ora from \"ora\";\nimport { getWavHeaders, recExp, useSpinner } from \"./helpers\";\n\ntype AudioEncoding = keyof typeof google.cloud.speech.v1.RecognitionConfig.AudioEncoding;\n\n// Define constants\nconst SPINNER_START_TEXT = \"STT stream running...\";\nconst SUCCESS_TEXT = \"STT stream done\";\nconst FAIL_TEXT = \"STT stream failed\";\nconst FAQ_URL = \"https://cloud.google.com/speech-to-text/docs/error-messages\";\n\n/** Options for an STT stream */\nexport interface STTStreamOptions {\n  /** When true, results are appended to the text file. When false, the text file is emptied first. Default `false`. */\n  append?: boolean;\n  /** Audio encoding. See https://cloud.google.com/speech-to-text/docs/encoding. Default `\"LINEAR16\"`. */\n  encoding?: AudioEncoding;\n  /** Audio sample rate in Hertz */\n  sampleRateHertz: number;\n  /** BCP-47 language code. Default `\"en-GB\"`. */\n  languageCode?: string;\n}\n\n// Classes\n/** An STT stream */\nclass STTStream {\n  audioFilename: string;\n  textFilename: string;\n  append: STTStreamOptions[\"append\"];\n  encoding: STTStreamOptions[\"encoding\"];\n  sampleRateHertz: STTStreamOptions[\"sampleRateHertz\"];\n  languageCode: STTStreamOptions[\"languageCode\"];\n  /**\n   * @param audioFilename Path to audio file\n   * @param textFilename Path to text file\n   * @param options Options\n   */\n  constructor(\n    audioFilename: STTStream[\"audioFilename\"],\n    textFilename: STTStream[\"textFilename\"],\n    options: STTStreamOptions\n  ) {\n    this.audioFilename = audioFilename;\n    this.textFilename = textFilename;\n    this.append = options.append || false;\n    this.encoding = options.encoding || \"LINEAR16\";\n    this.sampleRateHertz = options.sampleRateHertz;\n    this.languageCode = options.languageCode || \"en-GB\";\n  }\n  /**\n   * Test if headers of wav file are correct\n   * @returns If encoding was correct, if sample rate was correct, and the headers of the wav file\n   */\n  async testHeaders(): Promise<[boolean, boolean, STTStreamOptions]> {\n    const headers = await getWavHeaders(this.audioFilename);\n    const encodingPassed = this.encoding === headers.encoding;\n    const sampleRatePassed = this.sampleRateHertz === headers.sampleRateHertz;\n    return [encodingPassed, sampleRatePassed, headers];\n  }\n  /**\n   * Start STT stream\n   * @param showSpinner Whether to show a loading spinner in the console during STT stream. Default `true`\n   * @returns Lines of the transcript\n   */\n  async start(showSpinner = true): Promise<string[]> {\n    const [goodEncoding, goodSampleRate, headers] = await this.testHeaders();\n    const warningPrefix =\n      \"Warning: Your audio encoding and sample rate might not be correct\";\n\n    if (!goodEncoding) {\n      const reason = recExp(\"encoding\", this.encoding, headers.encoding);\n      console.warn(`${warningPrefix}. ${reason}`);\n    }\n\n    if (!goodSampleRate) {\n      const reason = recExp(\n        \"sample rate (Hertz)\",\n        this.sampleRateHertz,\n        headers.sampleRateHertz\n      );\n      console.warn(`${warningPrefix}. ${reason}`);\n    }\n\n    // Initialise results\n    let results: string[] = [];\n    // If user wants to show spinner\n    if (showSpinner) {\n      // Run function with spinner wrapper\n      results = await useSpinner(\n        this.inner(),\n        ora(SPINNER_START_TEXT),\n        SUCCESS_TEXT,\n        FAIL_TEXT\n      );\n    } else {\n      // Run function normally\n      results = await this.inner();\n    }\n    // Return results\n    return results;\n  }\n  private inner(): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      // Initialise results\n      const results: string[] = [];\n\n      // If not appending\n      if (!this.append) {\n        // Empty file\n        writeFileSync(this.textFilename, \"\");\n      }\n\n      // Initialise client\n      const client = new SpeechClient();\n\n      // Define request\n      const request = {\n        config: {\n          encoding: this.encoding,\n          sampleRateHertz: this.sampleRateHertz,\n          languageCode: this.languageCode,\n        },\n      };\n\n      // Create read stream for audio file\n      const audioReadStream = createReadStream(this.audioFilename);\n\n      // Define a read/write stream to handle audio file\n      const recogniseStream = client\n        .streamingRecognize(request)\n        .on(\"error\", err => {\n          // Handle errors\n          const reason = [\n            `An error occurred running the STT stream. ${err}`,\n            `See ${FAQ_URL} for help on common error messages`,\n          ].join(\"\\n\");\n          reject(reason);\n        })\n        .on(\"data\", data => {\n          // Get result\n          const result = data.results[0].alternatives[0].transcript as string;\n          // Save result\n          results.push(result);\n          // Append result to text file\n          appendFile(this.textFilename, `${result}\\n`, err => {\n            // Handle errors\n            if (!err) return;\n            const reason = `An error occurred writing to the text file. ${err}`;\n            reject(reason);\n          });\n        })\n        .on(\"end\", () => resolve(results));\n\n      // Pipe audio file through read/write stream\n      audioReadStream.pipe(recogniseStream);\n    });\n  }\n}\n\nexport default STTStream;\n","import { promises, writeFileSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { runBashScript } from \"./helpers\";\nimport STTStream, { STTStreamOptions } from \"./STTStream\";\n\nconst { readdir } = promises;\n\n// Constants\nconst SHARD_LENGTH = 300;\n\n/** Options for an STT stream but `append` must be set to `true` */\nexport interface STTStreamOptionsAppend extends STTStreamOptions {\n  append: true;\n}\n\n/** Listener for the progress value */\ntype ProgressListener = (\n  /** Progress percentage */\n  progress: number\n) => void | Promise<void>;\n\n/** Listener for the distribute value */\ntype DistributeListener = () => void | Promise<void>;\n\n/** Listener for any property */\ntype Listener = ProgressListener | DistributeListener;\n\n/** A distributed STT stream */\nclass DistributedSTTStream {\n  audioFilename: string;\n  audioDirname: string;\n  textFilename: string;\n  options: STTStreamOptionsAppend;\n  progress: number;\n  progressListeners: ProgressListener[];\n  distributeListeners: DistributeListener[];\n  /**\n   * @param audioFilename Path to original audio file\n   * @param audioDirname Path to output distributed audio directory\n   * @param textFilename Path to text file\n   * @param options Options\n   */\n  constructor(\n    audioFilename: DistributedSTTStream[\"audioFilename\"],\n    audioDirname: DistributedSTTStream[\"audioDirname\"],\n    textFilename: DistributedSTTStream[\"textFilename\"],\n    options: DistributedSTTStream[\"options\"]\n  ) {\n    this.audioFilename = audioFilename;\n    this.audioDirname = audioDirname;\n    this.textFilename = textFilename;\n    this.options = options;\n    this.progress = 0;\n    this.progressListeners = [];\n    this.distributeListeners = [];\n  }\n  private async setProgress(progress: number): Promise<void> {\n    // Set progress\n    this.progress = progress;\n    // Call every listener\n    for (const listener of this.progressListeners) {\n      await listener(progress);\n    }\n  }\n  /**\n   * Listen to events and run callback functions\n   * @param event Event to listen to\n   * @param callback Function to run when event fires\n   */\n  on(event: \"distribute\", callback: DistributeListener): void;\n  /**\n   * Listen to events and run callback functions\n   * @param event Event to listen to\n   * @param callback Function to run when event fires\n   */\n  on(event: \"progress\", callback: ProgressListener): void;\n  on(event: string, callback: Listener): void {\n    if (event === \"progress\") {\n      // Add callback to progress listeners\n      this.progressListeners.push(callback);\n    } else if (event === \"distribute\") {\n      // Add callback to distribute listeners\n      this.distributeListeners.push(callback as DistributeListener);\n    }\n  }\n  /**\n   * Distribute audio into separate files. (`.distribute` is automatically called by `.start`)\n   * @returns STD output\n   */\n  async distribute(): Promise<string> {\n    const command = `./distribute.sh ${this.audioFilename} ${this.audioDirname} ${SHARD_LENGTH}`;\n    let stdout = \"\";\n    try {\n      stdout = await runBashScript(command);\n    } catch (error_) {\n      const error = `${error_}`;\n      // Define known warnings patterns\n      const knownWarningPatterns = [\n        /End position is after expected end of audio/i,\n        /Last 1 position\\(s\\) not reached/i,\n      ];\n      // Handle STD errors\n      if (error) {\n        const errors = error.split(\"\\n\");\n        for (const errorMessage of errors) {\n          // Check if every error is a known warning\n          let isKnownWarning = false;\n          for (const pattern of knownWarningPatterns) {\n            isKnownWarning = isKnownWarning || pattern.test(errorMessage);\n          }\n          // If error is not a known warning and it is full, throw it\n          if (!isKnownWarning && errorMessage.length) {\n            throw errorMessage;\n          }\n        }\n      }\n    }\n\n    // Call every listener\n    for (const listener of this.distributeListeners) {\n      await listener();\n    }\n\n    // Return STD output\n    return stdout;\n  }\n  /**\n   * Start distributed STT stream\n   * @param showSpinner Whether to show a loading spinner in the console during STT stream. Default `true`.\n   */\n  async start(showSpinner?: boolean): Promise<void> {\n    try {\n      // Distribute audio file\n      const stdout = await this.distribute();\n      // Log any STD output\n      stdout.length && console.log(`Distribute script: ${stdout}`);\n    } catch (err) {\n      throw `An error occurred distributing the audio file. ${err}`;\n    }\n\n    // Read audio directory\n    const filenames = await readdir(this.audioDirname);\n\n    // Define wav pattern\n    const pattern = /\\.wav$/;\n    const wavFilenames = filenames.filter(fn => pattern.test(fn));\n    const wavFileNum = wavFilenames.length;\n\n    // For every wav path\n    for (const i in wavFilenames) {\n      const index = parseInt(i);\n      const wavFilename = wavFilenames[i];\n      // Get the full wav path\n      const fullWavFn = resolve(this.audioDirname, wavFilename);\n      // Initialise an STT stream\n      const stream = new STTStream(fullWavFn, this.textFilename, this.options);\n      // Calculate progress percentage\n      const percentage = ~~((index / wavFileNum) * 100);\n      // Set progress\n      await this.setProgress(percentage);\n      // Start the stream\n      await stream.start(showSpinner);\n    }\n    // Set progress to 100%\n    await this.setProgress(100);\n  }\n  /** Empty text file */\n  emptyTextFile(): void {\n    writeFileSync(this.textFilename, \"\");\n  }\n}\n\nexport default DistributedSTTStream;\n","import DistributedSTTStream from \"./DistributedSTTStream\";\nimport { relPathToAbs } from \"./helpers\";\n\n// Prepare environment\nconst relGoogleKeyFilename = \"./lgim-stt-key.json\";\nconst absGoogleKeyFilename = relPathToAbs(relGoogleKeyFilename);\nprocess.env.GOOGLE_APPLICATION_CREDENTIALS = absGoogleKeyFilename;\n\n// Initialise distributed STT stream\nconst distStream = new DistributedSTTStream(\n  \"input.wav\",\n  \"./audio_dist\",\n  \"text.txt\",\n  {\n    append: true,\n    sampleRateHertz: 48000,\n  }\n);\n\n// Empty text file\ndistStream.emptyTextFile();\n// Log distribution\ndistStream.on(\"distribute\", () => console.log(\"Distributed\"));\n// Log progress\ndistStream.on(\"progress\", console.log);\n// Start stream\ndistStream.start().catch(console.error);\n"]}