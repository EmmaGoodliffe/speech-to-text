{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.9.4",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "transcribe-stt!",
  "docComment": "/**\n * Transcribe audio of any length using Google's Speech to Text API\n *\n * @remarks\n *\n * See <a href=\"#classes\">classes</a>\n *\n * @packageDocumentation\n */\n",
  "name": "transcribe-stt",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "transcribe-stt!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!AudioEncoding:type",
          "docComment": "/**\n * Audio encoding\n *\n * @remarks\n *\n * See https://cloud.google.com/speech-to-text/docs/encoding\n *\n * If you don't know the encoding of your WAV file, find out how to check it <a href=\"https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#encoding\">here</a>\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AudioEncoding = "
            },
            {
              "kind": "Content",
              "text": "keyof typeof "
            },
            {
              "kind": "Reference",
              "text": "google.cloud.speech.v1.RecognitionConfig.AudioEncoding",
              "canonicalReference": "@google-cloud/speech!google.cloud.speech.v1.RecognitionConfig.AudioEncoding:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AudioEncoding",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "transcribe-stt!DistributedSTTStream:class",
          "docComment": "/**\n * A distributed STT stream (for audio files longer than 305 seconds)\n *\n * @example\n *\n * This example writes the transcript of a long LINEAR16 16000Hz WAV file to a text file. You can customise the functionality of the stream with the {@link STTStreamOptionsAppend}\n *\n * If you don't know the encoding or sample rate of your WAV file, find out how to check it <a href=\"https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#checking-encoding-and-sample-rate\">here</a>\n * ```ts\n * import { DistributedSTTStream } from \"transcribe-stt\";\n *\n * // TODO: Authenticate with Google. See https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#google-authentication\n *\n * const audioFilename = \"./<input audio file>.wav\";\n * const audioDirname = \"./<output audio directory>\";\n * const textFilename = \"./<output text file>.txt\";\n * const options = {\n *  encoding: \"LINEAR16\",\n *  sampleRateHertz: 16000,\n * };\n *\n * // Initialise stream\n * const stream = new DistributedSTTStream(audioFilename, audioDirname, textFilename, options);\n *\n * // Empty text file\n * stream.emptyTextFile();\n *\n * // Start stream and write output to text file\n * stream.start();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class DistributedSTTStream "
            }
          ],
          "releaseTag": "Public",
          "name": "DistributedSTTStream",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "transcribe-stt!DistributedSTTStream:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `DistributedSTTStream` class\n *\n * @param audioFilename - Path to original audio file\n *\n * @param audioDirname - Path to output distributed audio directory\n *\n * @param textFilename - Path to text file\n *\n * @param options - Options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", audioDirname: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptionsAppend",
                  "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "audioFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "audioDirname",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "textFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#audioDirname:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioDirname: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioDirname",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#audioFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#distribute:member(1)",
              "docComment": "/**\n * Distribute audio into separate files (automatically called by {@link DistributedSTTStream.start})\n *\n * @remarks\n *\n * Single audio file is split up into smaller files of 300 seconds so they can be used with Google's streaming API. Each file is separately streamed and written to the text file when {@link DistributedSTTStream.start} is called\n *\n * @returns STD output of bash script\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distribute(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "distribute"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#distributeListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distributeListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "DistributeListener",
                  "canonicalReference": "transcribe-stt!DistributeListener:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distributeListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#emptyTextFile:member(1)",
              "docComment": "/**\n * Empty text file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emptyTextFile(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emptyTextFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#on:member(1)",
              "docComment": "/**\n * Listen to `\"distribute\"` event and run callback functions\n *\n * @remarks\n *\n * The callback function is run whenever the {@link DistributedSTTStream.distribute} method finishes.\n *\n * This can be helpful if you are using a very large audio file and want to know when it has been split up by the {@link DistributedSTTStream.start} method.\n *\n * ({@link DistributedSTTStream.distribute} returns a promise which resolves when the distribution completes. So if you are using the method on its own, this event is obsolete)\n *\n * @param event - Event to listen to\n *\n * @param callback - Function to run when event fires\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"distribute\""
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "DistributeListener",
                  "canonicalReference": "transcribe-stt!DistributeListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#on:member(2)",
              "docComment": "/**\n * Listen to `\"progress\"` event and run callback functions\n *\n * @remarks\n *\n * The callback function is run whenever a distributed audio file is transcribed. The progress percentage of audio files transcribed is passed as the parameter of the callback. For example, if 2 of 4 audio files have been transcribed, `50` will be passed, representing 50%\n *\n * @param event - Event to listen to\n *\n * @param callback - Function to run when event fires\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"progress\""
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ProgressListener",
                  "canonicalReference": "transcribe-stt!ProgressListener:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptionsAppend",
                  "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#progress:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progress: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#progressListeners:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "progressListeners: "
                },
                {
                  "kind": "Reference",
                  "text": "ProgressListener",
                  "canonicalReference": "transcribe-stt!ProgressListener:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "progressListeners",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#start:member(1)",
              "docComment": "/**\n * Start distributed STT stream\n *\n * @param useConsole - See {@link STTStream.start}\n *\n * @returns Lines of the transcript of each audio file\n *\n * @example\n *\n * See {@link DistributedSTTStream} for an example\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(useConsole?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[][]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "useConsole",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!DistributedSTTStream#textFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!DistributeListener:type",
          "docComment": "/**\n * Listener for the distribute value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DistributeListener = "
            },
            {
              "kind": "Content",
              "text": "() => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DistributeListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!LanguageCode:type",
          "docComment": "/**\n * Language code\n *\n * @remarks\n *\n * See https://cloud.google.com/speech-to-text/docs/languages\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LanguageCode = "
            },
            {
              "kind": "Content",
              "text": "\"af-ZA\" | \"sq-AL\" | \"am-ET\" | \"ar-DZ\" | \"ar-BH\" | \"ar-EG\" | \"ar-IQ\" | \"ar-IL\" | \"ar-JO\" | \"ar-KW\" | \"ar-LB\" | \"ar-MA\" | \"ar-OM\" | \"ar-QA\" | \"ar-SA\" | \"ar-PS\" | \"ar-TN\" | \"ar-AE\" | \"ar-YE\" | \"hy-AM\" | \"az-AZ\" | \"eu-ES\" | \"bn-BD\" | \"bn-IN\" | \"bs-BA\" | \"bg-BG\" | \"my-MM\" | \"ca-ES\" | \"yue-Hant-HK\" | \"zh (cmn-Hans-CN)\" | \"zh-TW (cmn-Hant-TW)\" | \"hr-HR\" | \"cs-CZ\" | \"da-DK\" | \"nl-BE\" | \"nl-NL\" | \"en-AU\" | \"en-CA\" | \"en-GH\" | \"en-HK\" | \"en-IN\" | \"en-IE\" | \"en-KE\" | \"en-NZ\" | \"en-NG\" | \"en-PK\" | \"en-PH\" | \"en-SG\" | \"en-ZA\" | \"en-TZ\" | \"en-GB\" | \"en-US\" | \"et-EE\" | \"fil-PH\" | \"fi-FI\" | \"fr-BE\" | \"fr-CA\" | \"fr-FR\" | \"fr-CH\" | \"gl-ES\" | \"ka-GE\" | \"de-AT\" | \"de-DE\" | \"de-CH\" | \"el-GR\" | \"gu-IN\" | \"iw-IL\" | \"hi-IN\" | \"hu-HU\" | \"is-IS\" | \"id-ID\" | \"it-IT\" | \"it-CH\" | \"ja-JP\" | \"jv-ID\" | \"kn-IN\" | \"km-KH\" | \"ko-KR\" | \"lo-LA\" | \"lv-LV\" | \"lt-LT\" | \"mk-MK\" | \"ms-MY\" | \"ml-IN\" | \"mr-IN\" | \"mn-MN\" | \"ne-NP\" | \"no-NO\" | \"fa-IR\" | \"pl-PL\" | \"pt-BR\" | \"pt-PT\" | \"pa-Guru-IN\" | \"ro-RO\" | \"ru-RU\" | \"sr-RS\" | \"si-LK\" | \"sk-SK\" | \"sl-SI\" | \"es-AR\" | \"es-BO\" | \"es-CL\" | \"es-CO\" | \"es-CR\" | \"es-DO\" | \"es-EC\" | \"es-SV\" | \"es-GT\" | \"es-HN\" | \"es-MX\" | \"es-NI\" | \"es-PA\" | \"es-PY\" | \"es-PE\" | \"es-PR\" | \"es-ES\" | \"es-US\" | \"es-UY\" | \"es-VE\" | \"su-ID\" | \"sw-KE\" | \"sw-TZ\" | \"sv-SE\" | \"ta-IN\" | \"ta-MY\" | \"ta-SG\" | \"ta-LK\" | \"te-IN\" | \"th-TH\" | \"tr-TR\" | \"uk-UA\" | \"ur-IN\" | \"ur-PK\" | \"uz-UZ\" | \"vi-VN\" | \"zu-ZA\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LanguageCode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!Listener:type",
          "docComment": "/**\n * Listener for any property\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Listener = "
            },
            {
              "kind": "Reference",
              "text": "ProgressListener",
              "canonicalReference": "transcribe-stt!ProgressListener:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DistributeListener",
              "canonicalReference": "transcribe-stt!DistributeListener:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Listener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "transcribe-stt!ProgressListener:type",
          "docComment": "/**\n * Listener for the progress value\n *\n * @remarks\n *\n * <h2>Parameters</h2> <code>progress</code> - Progress percentage\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ProgressListener = "
            },
            {
              "kind": "Content",
              "text": "(progress: number) => void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ProgressListener",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "transcribe-stt!STTStream:class",
          "docComment": "/**\n * An STT stream (for audio files shorter than 305 seconds)\n *\n * @example\n *\n * This example writes the transcript of a short LINEAR16 16000Hz WAV file to a text file. You can customise the functionality of the stream with the {@link STTStreamOptions}.\n *\n * If you don't know the encoding or sample rate of your WAV file, find out how to check it <a href=\"https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#checking-encoding-and-sample-rate\">here</a>\n * ```ts\n * import { STTStream } form \"transcribe-stt\";\n *\n * // TODO: Authenticate with Google. See https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#google-authentication\n *\n * const audioFilename = \"./<input audio file>.wav\";\n * const textFilename = \"./<output text file>.txt\";\n * const options = {\n *  encoding: \"LINEAR16\",\n *  sampleRateHertz: 16000,\n * };\n *\n * // Initialise stream\n * const stream = new STTStream(audioFilename, textFilename, options);\n *\n * // Start stream and write output to text file\n * stream.start();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class STTStream "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStream",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "transcribe-stt!STTStream:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `STTStream` class\n *\n * @param audioFilename - Path to audio file\n *\n * @param textFilename - Path to text file\n *\n * @param options - Options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "audioFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "textFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#append:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"append\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#audioFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "audioFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "audioFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!STTStream#emptyTextFile:member(1)",
              "docComment": "/**\n * Empty text file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emptyTextFile(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emptyTextFile"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#encoding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"encoding\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#languageCode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languageCode: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"languageCode\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#sampleRateHertz:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sampleRateHertz: "
                },
                {
                  "kind": "Reference",
                  "text": "STTStreamOptions",
                  "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "[\"sampleRateHertz\"]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sampleRateHertz",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "transcribe-stt!STTStream#start:member(1)",
              "docComment": "/**\n * Start STT stream\n *\n * @param useConsole - Whether to show a loading spinner and deliver warnings in the console during STT stream. Default `true`\n *\n * @returns Lines of the transcript\n *\n * @example\n *\n * See {@link STTStream} for an example\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(useConsole?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "useConsole",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "start"
            },
            {
              "kind": "Property",
              "canonicalReference": "transcribe-stt!STTStream#textFilename:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFilename",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "transcribe-stt!STTStreamOptions:interface",
          "docComment": "/**\n * Options for an STT stream\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface STTStreamOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStreamOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#append:member",
              "docComment": "/**\n * When true, results are appended to the text file. When false, the text file is emptied first. Default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#encoding:member",
              "docComment": "/**\n * Audio encoding. See {@link AudioEncoding}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding: "
                },
                {
                  "kind": "Reference",
                  "text": "AudioEncoding",
                  "canonicalReference": "transcribe-stt!AudioEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#languageCode:member",
              "docComment": "/**\n * BCP-47 language code. See {@link LanguageCode}. Default `\"en-US\"`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languageCode?: "
                },
                {
                  "kind": "Reference",
                  "text": "LanguageCode",
                  "canonicalReference": "transcribe-stt!LanguageCode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "languageCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptions#sampleRateHertz:member",
              "docComment": "/**\n * Audio sample rate in Hertz\n *\n * @remarks\n *\n * If you don't know the encoding of your WAV file, find out how to check it <a href=\"https://github.com/EmmaGoodliffe/transcribe-stt/blob/master/README.md#sample-rate\">here</a>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sampleRateHertz: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sampleRateHertz",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "transcribe-stt!STTStreamOptionsAppend:interface",
          "docComment": "/**\n * Options for an STT stream but `append` must be set to `true`\n *\n * @remarks\n *\n * `append` must be set to `true` because each audio file's transcript is appended to the same file. Despite this, you can use {@link DistributedSTTStream.emptyTextFile} to empty the file first. See {@link DistributedSTTStream} for an example.\n *\n * See {@link STTStreamOptions} for other properties\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface STTStreamOptionsAppend extends "
            },
            {
              "kind": "Reference",
              "text": "STTStreamOptions",
              "canonicalReference": "transcribe-stt!STTStreamOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "STTStreamOptionsAppend",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "transcribe-stt!STTStreamOptionsAppend#append:member",
              "docComment": "/**\n * Extends {@link STTStreamOptions.append}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append: "
                },
                {
                  "kind": "Content",
                  "text": "true"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        }
      ]
    }
  ]
}
