/**
 * Download supported language codes from documentation to create a union type for them
 * @packageDocumentation
 */

import { writeFileSync } from "fs";
import fetch from "node-fetch";
import { relative, resolve } from "path";

// Constants
const LANG_CODE_URL =
  "https://cloud.google.com/speech-to-text/docs/common/languages.json";
const DOC_COMMENT = `
/**
 * Language code
 * @remarks
 * See https://cloud.google.com/speech-to-text/docs/languages
 * @public 
 */`;
const OUTPUT_FILENAME = resolve(__dirname, "./output/LanguageCode.ts");
const TS_FILENAME = relative(resolve("."), __filename);

// Types
/**
 * Language code record. BCP-47 code in index 1
 */
type Record = string[];

/** Full data received from GCP */
type Data = [Title[], ...Record[]];

// Interfaces
/** Title for language code records */
interface Title {
  label: string;
  value: string;
}

// Functions
/** Main function */
const main = async () => {
  // Fetch
  const response = await fetch(LANG_CODE_URL);
  // Parse
  const data = (await response.json()) as Data;
  // Extract
  const records = data.slice(1) as Record[];
  const codes = records.map(record => record[1]);
  // Filter
  const uniqueCodes = Array.from(new Set(codes));
  // Wrap
  const quotedCodes = uniqueCodes.map(code => `"${code}"`);
  // Join
  const typeSource = quotedCodes.join("|");
  // Concatenate
  const text = `// Do not edit directly. Generated by ${TS_FILENAME}
  // Types
  ${DOC_COMMENT}
  export type LanguageCode = ${typeSource};
  `;
  // Write
  writeFileSync(OUTPUT_FILENAME, text);
};

// Run
main().catch(console.error);
