import fetch from "node-fetch";
import { writeFileSync } from "fs";

// Constants
const LANG_CODE_URL =
  "https://cloud.google.com/speech-to-text/docs/common/languages.json";
const DOC_COMMENT = `
/**
 * Language code
 * @remarks
 * See https://cloud.google.com/speech-to-text/docs/languages
 * @public 
 */`;
const OUTPUT_PATH = "./scripts/ts/languageCode/output/LanguageCode.ts";

//  Types
/**
 * Language code record
 *
 * [Name, BCP-47 code, Model, ...other data]
 */
type Record = string[];

/** Full data received from GCP */
type Data = [Title[], ...Record[]];

// Interfaces
/** Title for language code records */
interface Title {
  label: string;
  value: string;
}

// Helpers
/**
 * Get unique values from array
 * @param arr Array
 */
const unique = <T>(arr: T[]) => Array.from(new Set(arr));

/** Main function */
const main = async () => {
  // Fetch language code data
  const response = await fetch(LANG_CODE_URL);
  // Convert data to JSON
  const data = (await response.json()) as Data;
  // Get records without titles
  const records = data.slice(1) as Record[];
  // Get language codes from records
  const codes = records.map(record => record[1]);
  // Get unique codes
  const uniqueCodes = unique(codes);
  // Wrap codes in quotes
  const quotedCodes = uniqueCodes.map(code => `"${code}"`);
  // Join with pipes
  const str = quotedCodes.join("|");
  // Create full text
  const text = `// Do not edit directly. Generated by scripts/ts/LanguageCode/index.ts
  ${DOC_COMMENT}
  export type LanguageCode = ${str};
  `;
  // Write to file
  writeFileSync(OUTPUT_PATH, text);
};

// Run main function
main().catch(console.error);
